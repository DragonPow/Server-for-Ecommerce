// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: uom.sql

package store

import (
	"context"
)

const createUom = `-- name: CreateUom :one
INSERT INTO uom(name, seller_id, create_uid, write_uid, create_date, write_date)
VALUES ($1, $2,
        case when $3::int8 > 0 then $3::int8 else 1 end,
        case when $3::int8 > 0 then $3::int8 else 1 end,
        now() AT TIME ZONE 'utc',
        now() AT TIME ZONE 'utc') RETURNING id
`

type CreateUomParams struct {
	Name      string `json:"name"`
	SellerID  int64  `json:"seller_id"`
	CreateUid int64  `json:"create_uid"`
}

func (q *Queries) CreateUom(ctx context.Context, arg CreateUomParams) (int64, error) {
	row := q.queryRow(ctx, q.createUomStmt, createUom, arg.Name, arg.SellerID, arg.CreateUid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUom = `-- name: UpdateUom :exec
UPDATE uom
SET name       = $1,
    seller_id  = $2,
    write_uid  = case when $3::int8 > 0 then $3::int8 else 1 end,
    write_date = now() AT TIME ZONE 'utc'
WHERE id = $4::int8
`

type UpdateUomParams struct {
	Name      string `json:"name"`
	SellerID  int64  `json:"seller_id"`
	CreateUid int64  `json:"create_uid"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateUom(ctx context.Context, arg UpdateUomParams) error {
	_, err := q.exec(ctx, q.updateUomStmt, updateUom,
		arg.Name,
		arg.SellerID,
		arg.CreateUid,
		arg.ID,
	)
	return err
}
