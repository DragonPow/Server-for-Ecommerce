// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: category.sql

package store

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category(name, description, create_uid, write_uid, create_date, write_date)
VALUES ($1, $2,
        case when $3::int8 > 0 then $3::int8 else 1 end,
        case when $3::int8 > 0 then $3::int8 else 1 end,
        now() AT TIME ZONE 'utc',
        now() AT TIME ZONE 'utc') RETURNING id
`

type CreateCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreateUid   int64          `json:"create_uid"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (int64, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory, arg.Name, arg.Description, arg.CreateUid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE category
SET name        = $1,
    description = $2,
    write_uid   = case when $3::int8 > 0 then $3::int8 else 1 end,
    write_date  = now() AT TIME ZONE 'utc'
WHERE id = $4::int8
`

type UpdateCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreateUid   int64          `json:"create_uid"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.exec(ctx, q.updateCategoryStmt, updateCategory,
		arg.Name,
		arg.Description,
		arg.CreateUid,
		arg.ID,
	)
	return err
}
