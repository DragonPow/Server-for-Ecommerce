// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createUom = `-- name: CreateUom :one
INSERT INTO seller
(name, description, phone, address, logo_url, manager_id, create_uid, create_date, write_uid, write_time) VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id
`

type CreateUomParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Phone       sql.NullString `json:"phone"`
	Address     sql.NullString `json:"address"`
	LogoUrl     sql.NullString `json:"logo_url"`
	ManagerID   int64          `json:"manager_id"`
	CreateUid   sql.NullInt64  `json:"create_uid"`
	CreateDate  time.Time      `json:"create_date"`
	WriteUid    sql.NullInt64  `json:"write_uid"`
	WriteTime   sql.NullInt64  `json:"write_time"`
}

func (q *Queries) CreateUom(ctx context.Context, arg CreateUomParams) (int64, error) {
	row := q.queryRow(ctx, q.createUomStmt, createUom,
		arg.Name,
		arg.Description,
		arg.Phone,
		arg.Address,
		arg.LogoUrl,
		arg.ManagerID,
		arg.CreateUid,
		arg.CreateDate,
		arg.WriteUid,
		arg.WriteTime,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
