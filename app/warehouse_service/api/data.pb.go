// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/warehouse_service/api/data.proto

package api

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateImportBillResponseData struct {
	// ImportId
	ImportId             int64    `protobuf:"varint,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateImportBillResponseData) Reset()         { *m = CreateImportBillResponseData{} }
func (m *CreateImportBillResponseData) String() string { return proto.CompactTextString(m) }
func (*CreateImportBillResponseData) ProtoMessage()    {}
func (*CreateImportBillResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa468bb6f244fd1, []int{0}
}
func (m *CreateImportBillResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateImportBillResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateImportBillResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateImportBillResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateImportBillResponseData.Merge(m, src)
}
func (m *CreateImportBillResponseData) XXX_Size() int {
	return m.Size()
}
func (m *CreateImportBillResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateImportBillResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateImportBillResponseData proto.InternalMessageInfo

func (m *CreateImportBillResponseData) GetImportId() int64 {
	if m != nil {
		return m.ImportId
	}
	return 0
}

type GetImportBillResponseData struct {
	// Item
	Item                 *GetImportBillItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetImportBillResponseData) Reset()         { *m = GetImportBillResponseData{} }
func (m *GetImportBillResponseData) String() string { return proto.CompactTextString(m) }
func (*GetImportBillResponseData) ProtoMessage()    {}
func (*GetImportBillResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa468bb6f244fd1, []int{1}
}
func (m *GetImportBillResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImportBillResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImportBillResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImportBillResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImportBillResponseData.Merge(m, src)
}
func (m *GetImportBillResponseData) XXX_Size() int {
	return m.Size()
}
func (m *GetImportBillResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImportBillResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_GetImportBillResponseData proto.InternalMessageInfo

func (m *GetImportBillResponseData) GetItem() *GetImportBillItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetImportBillItem struct {
	// Id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// LastActionById
	LastActionById int64 `protobuf:"varint,3,opt,name=last_action_by_id,json=lastActionById,proto3" json:"last_action_by_id,omitempty"`
	// LastActionByName
	LastActionByName string `protobuf:"bytes,4,opt,name=last_action_by_name,json=lastActionByName,proto3" json:"last_action_by_name,omitempty"`
	// CreateById
	CreateById int64 `protobuf:"varint,5,opt,name=create_by_id,json=createById,proto3" json:"create_by_id,omitempty"`
	// CreateByName
	CreateByName string `protobuf:"bytes,6,opt,name=create_by_name,json=createByName,proto3" json:"create_by_name,omitempty"`
	// ItemDetails
	ItemDetails          []*GetImportBillItemDetail `protobuf:"bytes,7,rep,name=item_details,json=itemDetails,proto3" json:"item_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetImportBillItem) Reset()         { *m = GetImportBillItem{} }
func (m *GetImportBillItem) String() string { return proto.CompactTextString(m) }
func (*GetImportBillItem) ProtoMessage()    {}
func (*GetImportBillItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa468bb6f244fd1, []int{2}
}
func (m *GetImportBillItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImportBillItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImportBillItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImportBillItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImportBillItem.Merge(m, src)
}
func (m *GetImportBillItem) XXX_Size() int {
	return m.Size()
}
func (m *GetImportBillItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImportBillItem.DiscardUnknown(m)
}

var xxx_messageInfo_GetImportBillItem proto.InternalMessageInfo

func (m *GetImportBillItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetImportBillItem) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GetImportBillItem) GetLastActionById() int64 {
	if m != nil {
		return m.LastActionById
	}
	return 0
}

func (m *GetImportBillItem) GetLastActionByName() string {
	if m != nil {
		return m.LastActionByName
	}
	return ""
}

func (m *GetImportBillItem) GetCreateById() int64 {
	if m != nil {
		return m.CreateById
	}
	return 0
}

func (m *GetImportBillItem) GetCreateByName() string {
	if m != nil {
		return m.CreateByName
	}
	return ""
}

func (m *GetImportBillItem) GetItemDetails() []*GetImportBillItemDetail {
	if m != nil {
		return m.ItemDetails
	}
	return nil
}

type GetImportBillItemDetail struct {
	// ProductId
	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// ProductName
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// UomName
	UomName string `protobuf:"bytes,3,opt,name=uom_name,json=uomName,proto3" json:"uom_name,omitempty"`
	// Quantity
	Quantity             float64  `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImportBillItemDetail) Reset()         { *m = GetImportBillItemDetail{} }
func (m *GetImportBillItemDetail) String() string { return proto.CompactTextString(m) }
func (*GetImportBillItemDetail) ProtoMessage()    {}
func (*GetImportBillItemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa468bb6f244fd1, []int{3}
}
func (m *GetImportBillItemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImportBillItemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImportBillItemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImportBillItemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImportBillItemDetail.Merge(m, src)
}
func (m *GetImportBillItemDetail) XXX_Size() int {
	return m.Size()
}
func (m *GetImportBillItemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImportBillItemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GetImportBillItemDetail proto.InternalMessageInfo

func (m *GetImportBillItemDetail) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetImportBillItemDetail) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *GetImportBillItemDetail) GetUomName() string {
	if m != nil {
		return m.UomName
	}
	return ""
}

func (m *GetImportBillItemDetail) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateImportBillResponseData)(nil), "app.warehouse_service.api.CreateImportBillResponseData")
	proto.RegisterType((*GetImportBillResponseData)(nil), "app.warehouse_service.api.GetImportBillResponseData")
	proto.RegisterType((*GetImportBillItem)(nil), "app.warehouse_service.api.GetImportBillItem")
	proto.RegisterType((*GetImportBillItemDetail)(nil), "app.warehouse_service.api.GetImportBillItemDetail")
}

func init() {
	proto.RegisterFile("app/warehouse_service/api/data.proto", fileDescriptor_6fa468bb6f244fd1)
}

var fileDescriptor_6fa468bb6f244fd1 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x8a, 0xd3, 0x40,
	0x18, 0x77, 0x92, 0xba, 0xdb, 0x7e, 0x09, 0xc5, 0x1d, 0x0f, 0x26, 0xfe, 0x09, 0x31, 0xec, 0xa1,
	0xa2, 0xa6, 0x50, 0x8f, 0x5e, 0xb4, 0x2e, 0x48, 0x2e, 0x1e, 0x02, 0x5e, 0x04, 0x09, 0xdf, 0x66,
	0x06, 0x1c, 0x48, 0x32, 0x63, 0x32, 0x51, 0xfa, 0x1a, 0x9e, 0x7c, 0x0c, 0x1f, 0xc3, 0xa3, 0x8f,
	0x20, 0xf5, 0x45, 0xa4, 0x5f, 0xba, 0x75, 0xb5, 0xe4, 0xe0, 0x6d, 0xf2, 0xfb, 0xc7, 0x2f, 0xbf,
	0x19, 0x38, 0x47, 0x63, 0x96, 0x9f, 0xb1, 0x95, 0x1f, 0x74, 0xdf, 0xc9, 0xa2, 0x93, 0xed, 0x27,
	0x55, 0xca, 0x25, 0x1a, 0xb5, 0x14, 0x68, 0x31, 0x35, 0xad, 0xb6, 0x9a, 0x87, 0x68, 0x4c, 0x7a,
	0xa4, 0x4a, 0xd1, 0xa8, 0xe4, 0x39, 0xdc, 0x7f, 0xd5, 0x4a, 0xb4, 0x32, 0xab, 0x8d, 0x6e, 0xed,
	0x5a, 0x55, 0x55, 0x2e, 0x3b, 0xa3, 0x9b, 0x4e, 0x5e, 0xa0, 0x45, 0x7e, 0x0f, 0x66, 0x8a, 0x98,
	0x42, 0x89, 0x80, 0xc5, 0x6c, 0xe1, 0xe6, 0xd3, 0x01, 0xc8, 0x44, 0xf2, 0x1e, 0xc2, 0xd7, 0xd2,
	0x8e, 0x38, 0x5f, 0xc0, 0x44, 0x59, 0x59, 0x93, 0xc9, 0x5b, 0x3d, 0x49, 0x47, 0x3b, 0xa4, 0x7f,
	0x65, 0x64, 0x56, 0xd6, 0x39, 0x39, 0x93, 0x6f, 0x0e, 0x9c, 0x1d, 0x71, 0x7c, 0x0e, 0xce, 0xa1,
	0x8a, 0xa3, 0x04, 0xe7, 0x30, 0x29, 0xb5, 0x90, 0x81, 0x13, 0xb3, 0xc5, 0x2c, 0xa7, 0x33, 0x7f,
	0x04, 0x67, 0x15, 0x76, 0xb6, 0xc0, 0xd2, 0x2a, 0xdd, 0x14, 0x97, 0x9b, 0x5d, 0x7b, 0x97, 0x2c,
	0xf3, 0x1d, 0xf1, 0x92, 0xf0, 0xf5, 0x26, 0x13, 0xfc, 0x29, 0xdc, 0xfe, 0x47, 0xda, 0x60, 0x2d,
	0x83, 0x09, 0xa5, 0xdd, 0xba, 0x2e, 0x7e, 0x83, 0xb5, 0xe4, 0x31, 0xf8, 0x25, 0xed, 0xb5, 0x0f,
	0xbd, 0x49, 0xa1, 0x30, 0x60, 0x14, 0x78, 0x0e, 0xf3, 0x3f, 0x0a, 0xca, 0x3a, 0xa1, 0x2c, 0xff,
	0x4a, 0x43, 0x39, 0x6f, 0xc1, 0xdf, 0xfd, 0x63, 0x21, 0xa4, 0x45, 0x55, 0x75, 0xc1, 0x69, 0xec,
	0x2e, 0xbc, 0xd5, 0xea, 0x7f, 0x56, 0xba, 0x20, 0x6b, 0xee, 0xa9, 0xc3, 0xb9, 0x4b, 0xbe, 0x30,
	0xb8, 0x33, 0x22, 0xe4, 0x0f, 0x00, 0x4c, 0xab, 0x45, 0x5f, 0x5e, 0xbb, 0xcb, 0xd9, 0x1e, 0xc9,
	0x04, 0x7f, 0x08, 0xfe, 0x15, 0x4d, 0xad, 0x87, 0x3d, 0xbd, 0x3d, 0x46, 0xa5, 0x43, 0x98, 0xf6,
	0xba, 0x1e, 0x68, 0x97, 0xe8, 0xd3, 0x5e, 0xd7, 0x44, 0xdd, 0x85, 0xe9, 0xc7, 0x1e, 0x1b, 0xab,
	0xec, 0x86, 0xb6, 0x63, 0xf9, 0xe1, 0x7b, 0xfd, 0xf8, 0xfb, 0x36, 0x62, 0x3f, 0xb6, 0x11, 0xfb,
	0xb9, 0x8d, 0xd8, 0xd7, 0x5f, 0xd1, 0x8d, 0x77, 0xe1, 0xe8, 0xb3, 0xbd, 0x3c, 0xa1, 0x27, 0xfb,
	0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xa8, 0xe7, 0x1b, 0xda, 0x02, 0x00, 0x00,
}

func (m *CreateImportBillResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateImportBillResponseData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateImportBillResponseData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImportId != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.ImportId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetImportBillResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImportBillResponseData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImportBillResponseData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetImportBillItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImportBillItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImportBillItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemDetails) > 0 {
		for iNdEx := len(m.ItemDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CreateByName) > 0 {
		i -= len(m.CreateByName)
		copy(dAtA[i:], m.CreateByName)
		i = encodeVarintData(dAtA, i, uint64(len(m.CreateByName)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreateById != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.CreateById))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LastActionByName) > 0 {
		i -= len(m.LastActionByName)
		copy(dAtA[i:], m.LastActionByName)
		i = encodeVarintData(dAtA, i, uint64(len(m.LastActionByName)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastActionById != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.LastActionById))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintData(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetImportBillItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImportBillItemDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImportBillItemDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Quantity))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.UomName) > 0 {
		i -= len(m.UomName)
		copy(dAtA[i:], m.UomName)
		i = encodeVarintData(dAtA, i, uint64(len(m.UomName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintData(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	offset -= sovData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateImportBillResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImportId != 0 {
		n += 1 + sovData(uint64(m.ImportId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetImportBillResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetImportBillItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovData(uint64(m.Id))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.LastActionById != 0 {
		n += 1 + sovData(uint64(m.LastActionById))
	}
	l = len(m.LastActionByName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.CreateById != 0 {
		n += 1 + sovData(uint64(m.CreateById))
	}
	l = len(m.CreateByName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.ItemDetails) > 0 {
		for _, e := range m.ItemDetails {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetImportBillItemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovData(uint64(m.ProductId))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.UomName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Quantity != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateImportBillResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateImportBillResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateImportBillResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportId", wireType)
			}
			m.ImportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImportBillResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImportBillResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImportBillResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &GetImportBillItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImportBillItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImportBillItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImportBillItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActionById", wireType)
			}
			m.LastActionById = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastActionById |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActionByName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastActionByName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateById", wireType)
			}
			m.CreateById = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateById |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateByName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateByName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDetails = append(m.ItemDetails, &GetImportBillItemDetail{})
			if err := m.ItemDetails[len(m.ItemDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImportBillItemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImportBillItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImportBillItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Quantity = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupData = fmt.Errorf("proto: unexpected end of group")
)
