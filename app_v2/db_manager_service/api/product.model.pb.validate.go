// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app_v2/db_manager_service/api/product.model.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AddProductTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for OriginPrice

	// no validation rules for SalePrice

	// no validation rules for Variants

	// no validation rules for TemplateId

	// no validation rules for CategoryId

	// no validation rules for UomId

	return nil
}

// AddProductTemplateRequestValidationError is the validation error returned by
// AddProductTemplateRequest.Validate if the designated constraints aren't met.
type AddProductTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductTemplateRequestValidationError) ErrorName() string {
	return "AddProductTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductTemplateRequestValidationError{}

// Validate checks the field values on AddProductTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProductTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProductTemplateResponseValidationError is the validation error returned
// by AddProductTemplateResponse.Validate if the designated constraints aren't met.
type AddProductTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductTemplateResponseValidationError) ErrorName() string {
	return "AddProductTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductTemplateResponseValidationError{}

// Validate checks the field values on AddProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for OriginPrice

	// no validation rules for SalePrice

	// no validation rules for Variants

	return nil
}

// AddProductRequestValidationError is the validation error returned by
// AddProductRequest.Validate if the designated constraints aren't met.
type AddProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductRequestValidationError) ErrorName() string {
	return "AddProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductRequestValidationError{}

// Validate checks the field values on AddProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProductResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProductResponseValidationError is the validation error returned by
// AddProductResponse.Validate if the designated constraints aren't met.
type AddProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductResponseValidationError) ErrorName() string {
	return "AddProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Variants

	return nil
}

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UpdateProductResponseValidationError is the validation error returned by
// UpdateProductResponse.Validate if the designated constraints aren't met.
type UpdateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductResponseValidationError) ErrorName() string {
	return "UpdateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductResponseValidationError{}

// Validate checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteProductRequestValidationError is the validation error returned by
// DeleteProductRequest.Validate if the designated constraints aren't met.
type DeleteProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductRequestValidationError) ErrorName() string {
	return "DeleteProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductRequestValidationError{}

// Validate checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// DeleteProductResponseValidationError is the validation error returned by
// DeleteProductResponse.Validate if the designated constraints aren't met.
type DeleteProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductResponseValidationError) ErrorName() string {
	return "DeleteProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductResponseValidationError{}

// Validate checks the field values on AddProductTemplateResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductTemplateResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AddProductTemplateResponse_DataValidationError is the validation error
// returned by AddProductTemplateResponse_Data.Validate if the designated
// constraints aren't met.
type AddProductTemplateResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductTemplateResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductTemplateResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductTemplateResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductTemplateResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductTemplateResponse_DataValidationError) ErrorName() string {
	return "AddProductTemplateResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductTemplateResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductTemplateResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductTemplateResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductTemplateResponse_DataValidationError{}

// Validate checks the field values on AddProductResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AddProductResponse_DataValidationError is the validation error returned by
// AddProductResponse_Data.Validate if the designated constraints aren't met.
type AddProductResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductResponse_DataValidationError) ErrorName() string {
	return "AddProductResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductResponse_DataValidationError{}
