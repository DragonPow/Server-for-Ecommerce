// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package store

import (
	"context"

	"github.com/lib/pq"
)

const getUsers = `-- name: GetUsers :many
SELECT id, name, user_name, passwrod, create_date, write_date
FROM "user"
WHERE CASE WHEN array_length($1::int8[], 1) > 0 THEN id = ANY($1::int8[]) ELSE TRUE END
`

func (q *Queries) GetUsers(ctx context.Context, ids []int64) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserName,
			&i.Passwrod,
			&i.CreateDate,
			&i.WriteDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
