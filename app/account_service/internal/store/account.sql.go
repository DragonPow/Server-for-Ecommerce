// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package store

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const getUserByUserNameAndPassword = `-- name: GetUserByUserNameAndPassword :one
SELECT id, username, password, create_date, write_date
FROM account
WHERE username = $1::varchar
AND password = $2::varchar
LIMIT 1
`

type GetUserByUserNameAndPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByUserNameAndPassword(ctx context.Context, arg GetUserByUserNameAndPasswordParams) (Account, error) {
	row := q.queryRow(ctx, q.getUserByUserNameAndPasswordStmt, getUserByUserNameAndPassword, arg.Username, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreateDate,
		&i.WriteDate,
	)
	return i, err
}

const getAccountByIds = `-- name: getAccountByIds :many
SELECT id, username, create_date, write_date
FROM account
WHERE id = ANY($1::int8[])
`

type getAccountByIdsRow struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	CreateDate time.Time `json:"create_date"`
	WriteDate  time.Time `json:"write_date"`
}

func (q *Queries) getAccountByIds(ctx context.Context, ids []int64) ([]getAccountByIdsRow, error) {
	rows, err := q.query(ctx, q.getAccountByIdsStmt, getAccountByIds, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []getAccountByIdsRow{}
	for rows.Next() {
		var i getAccountByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CreateDate,
			&i.WriteDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByIds = `-- name: getCustomerByIds :many
SELECT id, account_id, name, phone, address, create_date, write_date
FROM customer_info
WHERE id = ANY($1::int8[])
`

func (q *Queries) getCustomerByIds(ctx context.Context, ids []int64) ([]CustomerInfo, error) {
	rows, err := q.query(ctx, q.getCustomerByIdsStmt, getCustomerByIds, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerInfo{}
	for rows.Next() {
		var i CustomerInfo
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Phone,
			&i.Address,
			&i.CreateDate,
			&i.WriteDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
