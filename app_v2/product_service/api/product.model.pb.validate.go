// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app_v2/product_service/api/product.model.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetDetailProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDetailProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetDetailProductRequestValidationError is the validation error returned by
// GetDetailProductRequest.Validate if the designated constraints aren't met.
type GetDetailProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailProductRequestValidationError) ErrorName() string {
	return "GetDetailProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDetailProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailProductRequestValidationError{}

// Validate checks the field values on GetDetailProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDetailProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDetailProductResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDetailProductResponseValidationError is the validation error returned by
// GetDetailProductResponse.Validate if the designated constraints aren't met.
type GetDetailProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailProductResponseValidationError) ErrorName() string {
	return "GetDetailProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDetailProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailProductResponseValidationError{}

// Validate checks the field values on GetListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetListProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// GetListProductRequestValidationError is the validation error returned by
// GetListProductRequest.Validate if the designated constraints aren't met.
type GetListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListProductRequestValidationError) ErrorName() string {
	return "GetListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListProductRequestValidationError{}

// Validate checks the field values on GetListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetListProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListProductResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetListProductResponseValidationError is the validation error returned by
// GetListProductResponse.Validate if the designated constraints aren't met.
type GetListProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListProductResponseValidationError) ErrorName() string {
	return "GetListProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListProductResponseValidationError{}

// Validate checks the field values on ProductDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OriginPrice

	// no validation rules for SalePrice

	// no validation rules for Variants

	// no validation rules for CreatedBy

	// no validation rules for CreatedDate

	// no validation rules for UpdatedBy

	// no validation rules for UpdatedDate

	// no validation rules for TemplateId

	// no validation rules for TemplateName

	// no validation rules for TemplateDescription

	// no validation rules for SoldQuantity

	// no validation rules for RemainQuantity

	// no validation rules for Rating

	// no validation rules for NumberRating

	// no validation rules for SellerId

	// no validation rules for SellerName

	// no validation rules for SellerLogo

	// no validation rules for SellerAddress

	// no validation rules for CategoryId

	// no validation rules for CategoryName

	// no validation rules for UomId

	// no validation rules for UomName

	return nil
}

// ProductDetailValidationError is the validation error returned by
// ProductDetail.Validate if the designated constraints aren't met.
type ProductDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailValidationError) ErrorName() string { return "ProductDetailValidationError" }

// Error satisfies the builtin error interface
func (e ProductDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailValidationError{}

// Validate checks the field values on ProductOverview with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductOverview) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OriginPrice

	// no validation rules for SalePrice

	// no validation rules for CreatedBy

	// no validation rules for CreatedDate

	// no validation rules for TemplateId

	// no validation rules for TemplateName

	// no validation rules for SoldQuantity

	// no validation rules for RemainQuantity

	// no validation rules for Rating

	// no validation rules for SellerId

	// no validation rules for SellerName

	// no validation rules for SellerLogo

	// no validation rules for CategoryId

	// no validation rules for CategoryName

	// no validation rules for UomId

	// no validation rules for UomName

	return nil
}

// ProductOverviewValidationError is the validation error returned by
// ProductOverview.Validate if the designated constraints aren't met.
type ProductOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOverviewValidationError) ErrorName() string { return "ProductOverviewValidationError" }

// Error satisfies the builtin error interface
func (e ProductOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOverviewValidationError{}

// Validate checks the field values on GetListProductResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetListProductResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalItems

	// no validation rules for Page

	// no validation rules for PageSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListProductResponse_DataValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetListProductResponse_DataValidationError is the validation error returned
// by GetListProductResponse_Data.Validate if the designated constraints
// aren't met.
type GetListProductResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListProductResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListProductResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListProductResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListProductResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListProductResponse_DataValidationError) ErrorName() string {
	return "GetListProductResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetListProductResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListProductResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListProductResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListProductResponse_DataValidationError{}
