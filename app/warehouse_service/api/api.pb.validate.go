// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/warehouse_service/api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateImportBillRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateImportBillRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for ActionById

	return nil
}

// CreateImportBillRequestValidationError is the validation error returned by
// CreateImportBillRequest.Validate if the designated constraints aren't met.
type CreateImportBillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImportBillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImportBillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImportBillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImportBillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImportBillRequestValidationError) ErrorName() string {
	return "CreateImportBillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImportBillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImportBillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImportBillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImportBillRequestValidationError{}

// Validate checks the field values on CreateImportBillResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateImportBillResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImportBillResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateImportBillResponseValidationError is the validation error returned by
// CreateImportBillResponse.Validate if the designated constraints aren't met.
type CreateImportBillResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImportBillResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImportBillResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImportBillResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImportBillResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImportBillResponseValidationError) ErrorName() string {
	return "CreateImportBillResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImportBillResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImportBillResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImportBillResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImportBillResponseValidationError{}

// Validate checks the field values on GetImportBillRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetImportBillRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetImportId() <= 0 {
		return GetImportBillRequestValidationError{
			field:  "ImportId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetImportBillRequestValidationError is the validation error returned by
// GetImportBillRequest.Validate if the designated constraints aren't met.
type GetImportBillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImportBillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImportBillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImportBillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImportBillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImportBillRequestValidationError) ErrorName() string {
	return "GetImportBillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetImportBillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImportBillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImportBillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImportBillRequestValidationError{}

// Validate checks the field values on GetImportBillResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetImportBillResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetImportBillResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetImportBillResponseValidationError is the validation error returned by
// GetImportBillResponse.Validate if the designated constraints aren't met.
type GetImportBillResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImportBillResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImportBillResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImportBillResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImportBillResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImportBillResponseValidationError) ErrorName() string {
	return "GetImportBillResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetImportBillResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImportBillResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImportBillResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImportBillResponseValidationError{}
