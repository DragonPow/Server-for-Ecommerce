// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/tabbed/pqtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product(template_id, name, origin_price, sale_price, state, variants,
                    create_uid, write_uid, create_date, write_date)
VALUES ($1, $2, $3, $4, $5, $6,
        case when $7::int8 > 0 then $7::int8 else 1 end,
        case when $7::int8 > 0 then $7::int8 else 1 end,
        now() AT TIME ZONE 'utc',
        now() AT TIME ZONE 'utc') RETURNING id
`

type CreateProductParams struct {
	TemplateID  sql.NullInt64         `json:"template_id"`
	Name        string                `json:"name"`
	OriginPrice float64               `json:"origin_price"`
	SalePrice   float64               `json:"sale_price"`
	State       string                `json:"state"`
	Variants    pqtype.NullRawMessage `json:"variants"`
	CreateUid   int64                 `json:"create_uid"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int64, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.TemplateID,
		arg.Name,
		arg.OriginPrice,
		arg.SalePrice,
		arg.State,
		arg.Variants,
		arg.CreateUid,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProductTemplate = `-- name: CreateProductTemplate :one
INSERT INTO product_template(name, description, default_price, remain_quantity, sold_quantity, rating, number_rating,
                             variants, seller_id, category_id, uom_id,
                             create_uid, write_uid, create_date, write_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
        case when $12::int8 > 0 then $12::int8 else 1 end,
        case when $12::int8 > 0 then $12::int8 else 1 end,
        now() AT TIME ZONE 'utc',
        now() AT TIME ZONE 'utc') RETURNING id
`

type CreateProductTemplateParams struct {
	Name           string                `json:"name"`
	Description    sql.NullString        `json:"description"`
	DefaultPrice   float64               `json:"default_price"`
	RemainQuantity float64               `json:"remain_quantity"`
	SoldQuantity   float64               `json:"sold_quantity"`
	Rating         float64               `json:"rating"`
	NumberRating   int64                 `json:"number_rating"`
	Variants       pqtype.NullRawMessage `json:"variants"`
	SellerID       sql.NullInt64         `json:"seller_id"`
	CategoryID     sql.NullInt64         `json:"category_id"`
	UomID          sql.NullInt64         `json:"uom_id"`
	CreateUid      int64                 `json:"create_uid"`
}

func (q *Queries) CreateProductTemplate(ctx context.Context, arg CreateProductTemplateParams) (int64, error) {
	row := q.queryRow(ctx, q.createProductTemplateStmt, createProductTemplate,
		arg.Name,
		arg.Description,
		arg.DefaultPrice,
		arg.RemainQuantity,
		arg.SoldQuantity,
		arg.Rating,
		arg.NumberRating,
		arg.Variants,
		arg.SellerID,
		arg.CategoryID,
		arg.UomID,
		arg.CreateUid,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET template_id  = coalesce($1, template_id),
    name         = coalesce($2, name),
    origin_price = coalesce($3, origin_price),
    sale_price   = coalesce($4, sale_price),
    state        = coalesce($5, state),
    variants     = coalesce($6, variants),
    write_uid    = case when $7::int8 > 0 then $7::int8 else 1 end,
    write_date   = now() AT TIME ZONE 'utc'
WHERE id = $8::int8
RETURNING write_date
`

type UpdateProductParams struct {
	TemplateID  sql.NullInt64         `json:"template_id"`
	Name        sql.NullString        `json:"name"`
	OriginPrice sql.NullFloat64       `json:"origin_price"`
	SalePrice   sql.NullFloat64       `json:"sale_price"`
	State       sql.NullString        `json:"state"`
	Variants    pqtype.NullRawMessage `json:"variants"`
	CreateUid   int64                 `json:"create_uid"`
	ID          int64                 `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (time.Time, error) {
	row := q.queryRow(ctx, q.updateProductStmt, updateProduct,
		arg.TemplateID,
		arg.Name,
		arg.OriginPrice,
		arg.SalePrice,
		arg.State,
		arg.Variants,
		arg.CreateUid,
		arg.ID,
	)
	var write_date time.Time
	err := row.Scan(&write_date)
	return write_date, err
}

const updateProductTemplate = `-- name: UpdateProductTemplate :exec
UPDATE product_template
SET name            = coalesce($1, name),
    description     = coalesce($2, description),
    default_price   = coalesce($3, default_price),
    remain_quantity = coalesce($4, remain_quantity),
    sold_quantity   = coalesce($5, sold_quantity),
    rating          = coalesce($6, rating),
    number_rating   = coalesce($7, number_rating),
    variants        = coalesce($8, variants),
    seller_id       = coalesce($9, seller_id),
    category_id     = coalesce($10, category_id),
    uom_id          = coalesce($11, uom_id),
    write_uid       = case when $12::int8 > 0 then $12::int8 else 1 end,
    write_date      = now() AT TIME ZONE 'utc'
WHERE id = $13::int8
`

type UpdateProductTemplateParams struct {
	Name           sql.NullString        `json:"name"`
	Description    sql.NullString        `json:"description"`
	DefaultPrice   sql.NullFloat64       `json:"default_price"`
	RemainQuantity sql.NullFloat64       `json:"remain_quantity"`
	SoldQuantity   sql.NullFloat64       `json:"sold_quantity"`
	Rating         sql.NullFloat64       `json:"rating"`
	NumberRating   sql.NullInt64         `json:"number_rating"`
	Variants       pqtype.NullRawMessage `json:"variants"`
	SellerID       sql.NullInt64         `json:"seller_id"`
	CategoryID     sql.NullInt64         `json:"category_id"`
	UomID          sql.NullInt64         `json:"uom_id"`
	CreateUid      int64                 `json:"create_uid"`
	ID             int64                 `json:"id"`
}

func (q *Queries) UpdateProductTemplate(ctx context.Context, arg UpdateProductTemplateParams) error {
	_, err := q.exec(ctx, q.updateProductTemplateStmt, updateProductTemplate,
		arg.Name,
		arg.Description,
		arg.DefaultPrice,
		arg.RemainQuantity,
		arg.SoldQuantity,
		arg.Rating,
		arg.NumberRating,
		arg.Variants,
		arg.SellerID,
		arg.CategoryID,
		arg.UomID,
		arg.CreateUid,
		arg.ID,
	)
	return err
}
